// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feeds_users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedUser = `-- name: CreateFeedUser :one
INSERT INTO feeds_users (
        id,
        feed_id,
        user_id,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, feed_id, user_id, created_at, updated_at
`

type CreateFeedUserParams struct {
	ID        uuid.UUID
	FeedID    uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeedUser(ctx context.Context, arg CreateFeedUserParams) (FeedsUser, error) {
	row := q.db.QueryRowContext(ctx, createFeedUser,
		arg.ID,
		arg.FeedID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FeedsUser
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeedUser = `-- name: DeleteFeedUser :one
DELETE FROM feeds_users
WHERE id = $1
RETURNING id, feed_id, user_id, created_at, updated_at
`

func (q *Queries) DeleteFeedUser(ctx context.Context, id uuid.UUID) (FeedsUser, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedUser, id)
	var i FeedsUser
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedsUser = `-- name: GetFeedsUser :many
SELECT id, feed_id, user_id, created_at, updated_at
FROM feeds_users
WHERE user_id = $1
`

func (q *Queries) GetFeedsUser(ctx context.Context, userID uuid.UUID) ([]FeedsUser, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedsUser
	for rows.Next() {
		var i FeedsUser
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
